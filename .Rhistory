colSums(apply(mobile_price_data_test, 2, is.na))
sum(apply(mobile_price_data_train, 2, is.na))
sum(apply(mobile_price_data_test, 2, is.na))
sum(duplicated(churn_data_train))
sum(duplicated(churn_data_test))
colSums(apply(churn_data_train, 2, is.na))
colSums(apply(churn_data_test, 2, is.na))
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
churn_data_train = na.omit(churn_data_train)
churn_data_test = na.omit(churn_data_test)
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
lambda_baseball = lasso_lambdas(baseball_data_train, "Batting.average", "gaussian")
lambda_online_news = lasso_lambdas(online_news_data_train, "shares", "gaussian")
lambda_mobile_price = lasso_lambdas(mobile_price_data_train, "price_range", "multinomial")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", message = FALSE, warning = FALSE, error = FALSE)
library(data.table)
library(tidyverse)
library(glmnet)
library(caret)
library(gbm)
library(plyr)
library(skimr)
library(dplyr)
library(rpart)
library(randomForest)
library(gbm)
library(plyr)
setwd("C:/Users/lenovo/Documents/GitHub/fall20-NazliGul")
calculate_mape = function(pred, true){
mean(abs(pred - true)/true) * 100
}
calculate_cm = function(pred, true){
sum(diag(table(true, pred))) / length(true)
}
lasso_lambdas = function(data, target, family){
cols = setdiff(names(data), target)
X = data.matrix(data[, ..cols, with = FALSE])
y = data.matrix(data[,..target, with = FALSE])
lasso_cv = cv.glmnet(X, y, family = family, standardize = TRUE)
lambda_min = lasso_cv$lambda.min
lambda_1se = lasso_cv$lambda.1se
c(lambda_min, lambda_1se)
}
lasso_model = function(data, target, lambda, family){
cols = setdiff(names(data), target)
X = data.matrix(data[, ..cols, with = FALSE])
y = data.matrix(data[, ..target, with = FALSE])
model = glmnet(X,
y,
lambda = lambda,
family = family,
standardize = TRUE,
alpha = 1)
model
}
dt_tuning = function(data, target, min_bucket){
set.seed(12345)
TRcontrol = trainControl(method ="cv", number = 10)
model = train(as.formula(paste(target, "~ .")),
data = data,
method = "rpart",
trControl = TRcontrol,
tuneGrid = expand.grid(cp = seq(0.001, 0.1, length.out = 6)),
control = rpart.control(min_bucket = min_bucket)
)
model
}
rf_tuning = function(data, target){
set.seed(12345)
control = trainControl(method ="cv", number = 10)
model = train(as.formula(paste(target, "~ .")),
data = data,
trControl = control,
tuneGrid =  expand.grid(mtry = seq(floor(ncol(data) / 4), floor(ncol(data) / 2), length.out = 5)),
ntree = 500,
nodesize = 5
)
model
}
gbm_tuning = function(data, target, distribution, grid){
for(i in 1:nrow(grid)) {
set.seed(12345)
gbm_model <- gbm(as.formula(paste(target, "~ .")),
data = data,
distribution = distribution,
interaction.depth = grid$interaction.depth[i],
n.trees = grid$n.trees[i],
shrinkage = grid$shrinkage[i],
n.minobsinnode = grid$n.minobsinnode[i],
train.fraction = .75,
n.cores = NULL,
verbose = FALSE
)
grid$min_RMSE[i] <- sqrt(min(gbm_model$valid.error))
}
best_param = grid[which.min(grid$min_RMSE),]
model <- gbm(as.formula(paste(target, "~ .")),
data = data,
distribution = distribution,
interaction.depth = best_param$interaction.depth,
n.trees = best_param$n.trees,
shrinkage = best_param$shrinkage,
n.minobsinnode = best_param$n.minobsinnode,
train.fraction = .75,
n.cores = NULL,
verbose = FALSE
)
model
}
baseball_data = fread("Baseball_Statistics.csv")
colnames(baseball_data) <- make.names(colnames(baseball_data))
baseball_data = baseball_data %>% select(-c(YRINDEX, PLAYERID))
skim(baseball_data)
str(baseball_data)
head(baseball_data)
table(baseball_data$Batting.average)
baseball_data = baseball_data %>%
mutate_if(is.character, as.factor)
online_news_data = fread("Online_News_Popularity.csv")
colnames(online_news_data) <- make.names(colnames(online_news_data))
online_news_data = online_news_data %>% select(-url)
online_news_data = online_news_data[sample(nrow(online_news_data), 5000), ]
skim(online_news_data)
str(online_news_data)
head(online_news_data)
table(online_news_data$shares)
online_news_data = online_news_data %>%
mutate_if(is.character, as.factor)
mobile_price_data_train = fread("Mobile_Price_train.csv")
mobile_price_data_test = fread("Mobile_Price_test.csv")
colnames(mobile_price_data_train) <- make.names(colnames(mobile_price_data_train))
colnames(mobile_price_data_test) <- make.names(colnames(mobile_price_data_test))
skim(mobile_price_data_train)
str(mobile_price_data_train)
head(mobile_price_data_train)
table(mobile_price_data_train$price_range)
mobile_price_data_train = mobile_price_data_train %>% mutate(price_range = (if(price_range == 0){1}
else if(price_range==1){2}
else if(price_range==2) {3}
else {4}))
mobile_price_data_train = mobile_price_data_train %>%
mutate_if(is.character, as.factor)
mobile_price_data_test = mobile_price_data_test %>%
mutate_if(is.character, as.factor)
churn_data = fread("Customer_Churn.csv")
colnames(churn_data) <- make.names(colnames(churn_data))
churn_data = churn_data %>% select(-customerID)
skim(churn_data)
str(churn_data)
head(churn_data)
table(churn_data$Churn)
churn_data = churn_data %>%
mutate_if(is.character, as.factor)
set.seed(3295)
split_baseball_data <- createDataPartition(baseball_data$`Batting.average`, p = .7, list = FALSE, times = 1)
baseball_data_train <- baseball_data[split_baseball_data,]
baseball_data_test  <- baseball_data[-split_baseball_data,]
set.seed(3295)
split_online_news_data <- createDataPartition(online_news_data$`shares`, p = .7, list = FALSE, times = 1)
online_news_data_train <- online_news_data[split_online_news_data,]
online_news_data_test  <- online_news_data[-split_online_news_data,]
set.seed(3295)
split_churn_data <- createDataPartition(churn_data$`Churn`, p = .7, list = FALSE, times = 1)
churn_data_train <- churn_data[split_churn_data,]
churn_data_test  <- churn_data[-split_churn_data,]
sum(duplicated(baseball_data_train))
sum(duplicated(baseball_data_test))
colSums(apply(baseball_data_train, 2, is.na))
colSums(apply(baseball_data_test, 2, is.na))
sum(apply(baseball_data_train, 2, is.na))
sum(apply(baseball_data_test, 2, is.na))
sum(duplicated(online_news_data_train))
sum(duplicated(online_news_data_test))
colSums(apply(online_news_data_train, 2, is.na))
colSums(apply(online_news_data_test, 2, is.na))
sum(apply(online_news_data_train, 2, is.na))
sum(apply(online_news_data_test, 2, is.na))
sum(duplicated(mobile_price_data_train))
sum(duplicated(mobile_price_data_test))
colSums(apply(mobile_price_data_train, 2, is.na))
colSums(apply(mobile_price_data_test, 2, is.na))
sum(apply(mobile_price_data_train, 2, is.na))
sum(apply(mobile_price_data_test, 2, is.na))
sum(duplicated(churn_data_train))
sum(duplicated(churn_data_test))
colSums(apply(churn_data_train, 2, is.na))
colSums(apply(churn_data_test, 2, is.na))
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
churn_data_train = na.omit(churn_data_train)
churn_data_test = na.omit(churn_data_test)
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
lambda_baseball = lasso_lambdas(baseball_data_train, "Batting.average", "gaussian")
lambda_online_news = lasso_lambdas(online_news_data_train, "shares", "gaussian")
lambda_mobile_price = lasso_lambdas(mobile_price_data_train, "price_range", "multinomial")
baseball_data = fread("Baseball_Statistics.csv")
colnames(baseball_data) <- make.names(colnames(baseball_data))
baseball_data = baseball_data %>% select(-c(YRINDEX, PLAYERID))
skim(baseball_data)
str(baseball_data)
head(baseball_data)
table(baseball_data$Batting.average)
baseball_data = baseball_data %>%
mutate_if(is.character, as.factor)
online_news_data = fread("Online_News_Popularity.csv")
colnames(online_news_data) <- make.names(colnames(online_news_data))
online_news_data = online_news_data %>% select(-url)
online_news_data = online_news_data[sample(nrow(online_news_data), 5000), ]
skim(online_news_data)
str(online_news_data)
head(online_news_data)
table(online_news_data$shares)
online_news_data = online_news_data %>%
mutate_if(is.character, as.factor)
mobile_price_data_train = fread("Mobile_Price_train.csv")
mobile_price_data_test = fread("Mobile_Price_test.csv")
colnames(mobile_price_data_train) <- make.names(colnames(mobile_price_data_train))
colnames(mobile_price_data_test) <- make.names(colnames(mobile_price_data_test))
skim(mobile_price_data_train)
str(mobile_price_data_train)
head(mobile_price_data_train)
table(mobile_price_data_train$price_range)
mobile_price_data_train = mobile_price_data_train %>%
mutate_if(is.character, as.factor)
mobile_price_data_test = mobile_price_data_test %>%
mutate_if(is.character, as.factor)
churn_data = fread("Customer_Churn.csv")
colnames(churn_data) <- make.names(colnames(churn_data))
churn_data = churn_data %>% select(-customerID)
skim(churn_data)
str(churn_data)
head(churn_data)
table(churn_data$Churn)
churn_data = churn_data %>%
mutate_if(is.character, as.factor)
set.seed(3295)
split_baseball_data <- createDataPartition(baseball_data$`Batting.average`, p = .7, list = FALSE, times = 1)
baseball_data_train <- baseball_data[split_baseball_data,]
baseball_data_test  <- baseball_data[-split_baseball_data,]
set.seed(3295)
split_online_news_data <- createDataPartition(online_news_data$`shares`, p = .7, list = FALSE, times = 1)
online_news_data_train <- online_news_data[split_online_news_data,]
online_news_data_test  <- online_news_data[-split_online_news_data,]
set.seed(3295)
split_churn_data <- createDataPartition(churn_data$`Churn`, p = .7, list = FALSE, times = 1)
churn_data_train <- churn_data[split_churn_data,]
churn_data_test  <- churn_data[-split_churn_data,]
sum(duplicated(baseball_data_train))
sum(duplicated(baseball_data_test))
colSums(apply(baseball_data_train, 2, is.na))
colSums(apply(baseball_data_test, 2, is.na))
sum(apply(baseball_data_train, 2, is.na))
sum(apply(baseball_data_test, 2, is.na))
sum(duplicated(online_news_data_train))
sum(duplicated(online_news_data_test))
colSums(apply(online_news_data_train, 2, is.na))
colSums(apply(online_news_data_test, 2, is.na))
sum(apply(online_news_data_train, 2, is.na))
sum(apply(online_news_data_test, 2, is.na))
sum(duplicated(mobile_price_data_train))
sum(duplicated(mobile_price_data_test))
colSums(apply(mobile_price_data_train, 2, is.na))
colSums(apply(mobile_price_data_test, 2, is.na))
sum(apply(mobile_price_data_train, 2, is.na))
sum(apply(mobile_price_data_test, 2, is.na))
sum(duplicated(churn_data_train))
sum(duplicated(churn_data_test))
colSums(apply(churn_data_train, 2, is.na))
colSums(apply(churn_data_test, 2, is.na))
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
churn_data_train = na.omit(churn_data_train)
churn_data_test = na.omit(churn_data_test)
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
lambda_baseball = lasso_lambdas(baseball_data_train, "Batting.average", "gaussian")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", message = FALSE, warning = FALSE, error = FALSE)
library(data.table)
library(tidyverse)
library(glmnet)
library(caret)
library(gbm)
library(plyr)
library(skimr)
library(dplyr)
library(rpart)
library(randomForest)
library(gbm)
library(plyr)
setwd("C:/Users/lenovo/Documents/GitHub/fall20-NazliGul")
calculate_mape = function(pred, true){
mean(abs(pred - true)/true) * 100
}
calculate_cm = function(pred, true){
sum(diag(table(true, pred))) / length(true)
}
lasso_lambdas = function(data, target, family){
cols = setdiff(names(data), target)
X = data.matrix(data[, ..cols, with = FALSE])
y = data.matrix(data[,..target, with = FALSE])
lasso_cv = cv.glmnet(X, y, family = family, standardize = TRUE)
lambda_min = lasso_cv$lambda.min
lambda_1se = lasso_cv$lambda.1se
c(lambda_min, lambda_1se)
}
lasso_model = function(data, target, lambda, family){
cols = setdiff(names(data), target)
X = data.matrix(data[, ..cols, with = FALSE])
y = data.matrix(data[, ..target, with = FALSE])
model = glmnet(X,
y,
lambda = lambda,
family = family,
standardize = TRUE,
alpha = 1)
model
}
dt_tuning = function(data, target, min_bucket){
set.seed(12345)
TRcontrol = trainControl(method ="cv", number = 10)
model = train(as.formula(paste(target, "~ .")),
data = data,
method = "rpart",
trControl = TRcontrol,
tuneGrid = expand.grid(cp = seq(0.001, 0.1, length.out = 6)),
control = rpart.control(min_bucket = min_bucket)
)
model
}
rf_tuning = function(data, target){
set.seed(12345)
control = trainControl(method ="cv", number = 10)
model = train(as.formula(paste(target, "~ .")),
data = data,
trControl = control,
tuneGrid =  expand.grid(mtry = seq(floor(ncol(data) / 4), floor(ncol(data) / 2), length.out = 5)),
ntree = 500,
nodesize = 5
)
model
}
gbm_tuning = function(data, target, distribution, grid){
for(i in 1:nrow(grid)) {
set.seed(12345)
gbm_model <- gbm(as.formula(paste(target, "~ .")),
data = data,
distribution = distribution,
interaction.depth = grid$interaction.depth[i],
n.trees = grid$n.trees[i],
shrinkage = grid$shrinkage[i],
n.minobsinnode = grid$n.minobsinnode[i],
train.fraction = .75,
n.cores = NULL,
verbose = FALSE
)
grid$min_RMSE[i] <- sqrt(min(gbm_model$valid.error))
}
best_param = grid[which.min(grid$min_RMSE),]
model <- gbm(as.formula(paste(target, "~ .")),
data = data,
distribution = distribution,
interaction.depth = best_param$interaction.depth,
n.trees = best_param$n.trees,
shrinkage = best_param$shrinkage,
n.minobsinnode = best_param$n.minobsinnode,
train.fraction = .75,
n.cores = NULL,
verbose = FALSE
)
model
}
baseball_data = fread("Baseball_Statistics.csv")
colnames(baseball_data) <- make.names(colnames(baseball_data))
baseball_data = baseball_data %>% select(-c(YRINDEX, PLAYERID))
skim(baseball_data)
str(baseball_data)
head(baseball_data)
table(baseball_data$Batting.average)
baseball_data = baseball_data %>%
mutate_if(is.character, as.factor)
online_news_data = fread("Online_News_Popularity.csv")
colnames(online_news_data) <- make.names(colnames(online_news_data))
online_news_data = online_news_data %>% select(-url)
online_news_data = online_news_data[sample(nrow(online_news_data), 5000), ]
skim(online_news_data)
str(online_news_data)
head(online_news_data)
table(online_news_data$shares)
online_news_data = online_news_data %>%
mutate_if(is.character, as.factor)
mobile_price_data_train = fread("Mobile_Price_train.csv")
mobile_price_data_test = fread("Mobile_Price_test.csv")
colnames(mobile_price_data_train) <- make.names(colnames(mobile_price_data_train))
colnames(mobile_price_data_test) <- make.names(colnames(mobile_price_data_test))
skim(mobile_price_data_train)
str(mobile_price_data_train)
head(mobile_price_data_train)
table(mobile_price_data_train$price_range)
mobile_price_data_train = mobile_price_data_train %>%
mutate_if(is.character, as.factor)
mobile_price_data_test = mobile_price_data_test %>%
mutate_if(is.character, as.factor)
churn_data = fread("Customer_Churn.csv")
colnames(churn_data) <- make.names(colnames(churn_data))
churn_data = churn_data %>% select(-customerID)
skim(churn_data)
str(churn_data)
head(churn_data)
table(churn_data$Churn)
churn_data = churn_data %>%
mutate_if(is.character, as.factor)
set.seed(3295)
split_baseball_data <- createDataPartition(baseball_data$`Batting.average`, p = .7, list = FALSE, times = 1)
baseball_data_train <- baseball_data[split_baseball_data,]
baseball_data_test  <- baseball_data[-split_baseball_data,]
set.seed(3295)
split_online_news_data <- createDataPartition(online_news_data$`shares`, p = .7, list = FALSE, times = 1)
online_news_data_train <- online_news_data[split_online_news_data,]
online_news_data_test  <- online_news_data[-split_online_news_data,]
set.seed(3295)
split_churn_data <- createDataPartition(churn_data$`Churn`, p = .7, list = FALSE, times = 1)
churn_data_train <- churn_data[split_churn_data,]
churn_data_test  <- churn_data[-split_churn_data,]
sum(duplicated(baseball_data_train))
sum(duplicated(baseball_data_test))
colSums(apply(baseball_data_train, 2, is.na))
colSums(apply(baseball_data_test, 2, is.na))
sum(apply(baseball_data_train, 2, is.na))
sum(apply(baseball_data_test, 2, is.na))
sum(duplicated(online_news_data_train))
sum(duplicated(online_news_data_test))
colSums(apply(online_news_data_train, 2, is.na))
colSums(apply(online_news_data_test, 2, is.na))
sum(apply(online_news_data_train, 2, is.na))
sum(apply(online_news_data_test, 2, is.na))
sum(duplicated(mobile_price_data_train))
sum(duplicated(mobile_price_data_test))
colSums(apply(mobile_price_data_train, 2, is.na))
colSums(apply(mobile_price_data_test, 2, is.na))
sum(apply(mobile_price_data_train, 2, is.na))
sum(apply(mobile_price_data_test, 2, is.na))
sum(duplicated(churn_data_train))
sum(duplicated(churn_data_test))
colSums(apply(churn_data_train, 2, is.na))
colSums(apply(churn_data_test, 2, is.na))
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
churn_data_train = na.omit(churn_data_train)
churn_data_test = na.omit(churn_data_test)
sum(apply(churn_data_train, 2, is.na))
sum(apply(churn_data_test, 2, is.na))
lambda_baseball = lasso_lambdas(baseball_data_train, "Batting.average", "gaussian")
lambda_online_news = lasso_lambdas(online_news_data_train, "shares", "gaussian")
lambda_mobile_price = lasso_lambdas(mobile_price_data_train, "price_range", "multinomial")
lambda_churn = lasso_lambdas(churn_data_train, "Churn", "binomial")
lambda_min_baseball = lambda_baseball[1]
lambda_1se_baseball = lambda_baseball[2]
lambda_min_online_news = lambda_online_news[1]
lambda_1se_online_news = lambda_online_news[2]
lambda_min_mobile_price = lambda_mobile_price[1]
lambda_1se_mobile_price = lambda_mobile_price[2]
lambda_min_churn = lambda_churn[1]
lambda_1se_churn = lambda_churn[2]
lasso_min_baseball = lasso_model(baseball_data_train, "Batting.average", lambda_min_baseball, "gaussian")
lasso_1se_baseball = lasso_model(baseball_data_train, "Batting.average", lambda_1se_baseball, "gaussian")
lasso_min_online_news = lasso_model(online_news_data_train, "shares", lambda_min_online_news, "gaussian")
lasso_1se_online_news = lasso_model(online_news_data_train, "shares", lambda_1se_online_news, "gaussian")
lasso_min_mobile_price = lasso_model(mobile_price_data_train, "price_range", lambda_min_mobile_price, "multinomial")
lasso_1se_mobile_price = lasso_model(mobile_price_data_train, "price_range", lambda_1se_mobile_price, "multinomial")
lasso_min_churn = lasso_model(churn_data_train, "Churn", lambda_min_churn, "binomial")
lasso_1se_churn = lasso_model(churn_data_train, "Churn", lambda_1se_churn, "binomial")
mape_baseball = 99999
mape_online_news = 99999
cm_mobile_price = 0
cm_churn = 0
for (minbucket in seq(2, 7, length.out = 6)){
dt_cv_baseball = dt_tuning(baseball_data_train, "Batting.average", minbucket)
predict_baseball = predict(dt_cv_baseball$finalModel)
score_baseball = calculate_mape(predict_baseball, baseball_data_train$Batting.average)
if (score_baseball < mape_baseball) {
mape_baseball = score_baseball
dt_baseball = dt_cv_baseball$finalModel
}
dt_cv_online_news = dt_tuning(online_news_data_train, "shares", minbucket)
predict_online_news = predict(dt_cv_online_news$finalModel)
score_online_news = calculate_mape(predict_online_news, online_news_data_train$shares)
if (score_online_news < mape_online_news) {
mape_online_news = score_online_news
dt_online_news = dt_cv_online_news$finalModel
}
dt_cv_mobile_price = dt_tuning(mobile_price_data_train, "price_range", minbucket)
predict_mobile_price = predict(dt_cv_mobile_price$finalModel)
predict_mobile_price = apply(data.table(Class = apply(predict_mobile_price, 1, which.max)),
1, function(x){unique(mobile_price_train$price_range)[order(unique(mobile_price_data_train$price_range))][x]})
score_mobile_price = calculate_cm(predict_mobile_price, mobile_price_data_train$price_range)
if (score_mobile_price > cm_mobile_price) {
MAPE_mobile_price = score_mobile_price
dt_mobile_price = dt_cv_mobile_price$finalModel
}
dt_cv_churn = dt_tuning(churn_data_train, "Churn", minbucket)
predict_churn = predict(dt_cv_churn$finalModel)
predict_churn = apply(data.table(Class = apply(predict_churn, 1, which.max)),
1, function(x){unique(churn_data_train$Churn)[order(unique(churn_data_train$Churn))][x]})
score_churn = calculate_cm(predict_churn, churn_data_train$Churn)
if (score_churn > cm_churn) {
MAPE_churn = score_churn
dt_churn = dt_cv_churn$finalModel
}
}
